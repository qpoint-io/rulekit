// Code generated by goyacc -v y.output -o parser.gen.go -p rule parser.y. DO NOT EDIT.

//line parser.y:1

package rulekit

import __yyfmt__ "fmt"

//line parser.y:3

//line parser.y:5
type ruleSymType struct {
	yys          int
	rule         Rule
	operator     int
	valueLiteral []byte
	arrayValue   []Rule
	functionCall functionCall
}

const token_FIELD = 57346
const token_FUNCTION = 57347
const token_STRING = 57348
const token_HEX_STRING = 57349
const token_INT = 57350
const token_FLOAT = 57351
const token_BOOL = 57352
const token_IP_CIDR = 57353
const token_IP = 57354
const token_REGEX = 57355
const op_NOT = 57356
const op_AND = 57357
const op_OR = 57358
const token_LPAREN = 57359
const token_RPAREN = 57360
const token_LBRACKET = 57361
const token_RBRACKET = 57362
const token_COMMA = 57363
const op_EQ = 57364
const op_NE = 57365
const op_GT = 57366
const op_GE = 57367
const op_LT = 57368
const op_LE = 57369
const op_CONTAINS = 57370
const op_MATCHES = 57371
const op_IN = 57372
const token_ARRAY = 57373
const token_ERROR = 57374

var ruleToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_FIELD",
	"token_FUNCTION",
	"token_STRING",
	"token_HEX_STRING",
	"token_INT",
	"token_FLOAT",
	"token_BOOL",
	"token_IP_CIDR",
	"token_IP",
	"token_REGEX",
	"op_NOT",
	"op_AND",
	"op_OR",
	"token_LPAREN",
	"token_RPAREN",
	"token_LBRACKET",
	"token_RBRACKET",
	"token_COMMA",
	"op_EQ",
	"op_NE",
	"op_GT",
	"op_GE",
	"op_LT",
	"op_LE",
	"op_CONTAINS",
	"op_MATCHES",
	"op_IN",
	"token_ARRAY",
	"token_ERROR",
}

var ruleStatenames = [...]string{}

const ruleEofCode = 1
const ruleErrCode = 2
const ruleInitialStackSize = 16

//line parser.y:297

//line yacctab:1
var ruleExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const rulePrivate = 57344

const ruleLast = 99

var ruleAct = [...]int8{
	5, 6, 12, 33, 34, 53, 13, 36, 54, 35,
	31, 32, 26, 27, 28, 29, 52, 51, 22, 48,
	1, 39, 46, 38, 23, 24, 44, 20, 21, 22,
	49, 39, 45, 21, 22, 37, 43, 39, 50, 47,
	9, 40, 41, 42, 7, 8, 30, 25, 11, 2,
	0, 0, 39, 0, 55, 39, 56, 9, 10, 14,
	18, 7, 8, 15, 17, 16, 19, 3, 0, 0,
	4, 0, 20, 9, 10, 14, 18, 7, 8, 15,
	17, 16, 19, 0, 0, 0, 0, 0, 20, 9,
	40, 14, 18, 7, 8, 15, 17, 16, 19,
}

var rulePact = [...]int16{
	53, 13, -1000, 53, 53, -12, -19, -1000, -1000, -1000,
	-10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	85, 53, 53, -1000, 18, 36, -1000, -1000, -1000, -1000,
	69, 9, 8, -1000, -1000, -1000, 69, -4, -1000, -1000,
	-1000, 2, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -13,
	-1000, 85, -1000, -1000, 69, -1000, -1000,
}

var rulePgo = [...]int8{
	0, 20, 49, 48, 47, 46, 35, 2, 0, 6,
	1, 30,
}

var ruleR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 4, 4, 4, 4, 5, 5, 5, 6,
	6, 9, 10, 10, 10, 7, 7, 7, 7, 7,
	7, 7, 8, 8, 8, 8, 3, 11, 11, 11,
}

var ruleR2 = [...]int8{
	0, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 3, 0,
}

var ruleChk = [...]int16{
	-1000, -1, -2, 14, 17, -8, -10, 8, 9, 4,
	5, -3, -7, -9, 6, 10, 12, 11, 7, 13,
	19, 15, 16, -1, -1, -4, 24, 25, 26, 27,
	-5, 29, 30, 22, 23, 28, 17, -6, -7, -8,
	5, -1, -1, 18, -8, -10, 13, -9, 11, -11,
	-10, 21, 20, 18, 21, -7, -10,
}

var ruleDef = [...]int8{
	0, -2, 1, 0, 0, 25, 9, 32, 33, 34,
	35, 22, 23, 24, 26, 27, 28, 29, 30, 31,
	0, 0, 0, 4, 0, 0, 12, 13, 14, 15,
	0, 0, 0, 16, 17, 18, 39, 0, 19, 25,
	35, 2, 3, 5, 6, 7, 8, 10, 11, 0,
	37, 0, 21, 36, 0, 20, 38,
}

var ruleTok1 = [...]int8{
	1,
}

var ruleTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32,
}

var ruleTok3 = [...]int8{
	0,
}

var ruleErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ruleDebug        = 0
	ruleErrorVerbose = false
)

type ruleLexer interface {
	Result(n Rule)
	Lex(lval *ruleSymType) int
	Error(s string)
}

type ruleParser interface {
	Parse(ruleLexer) int
	Lookahead() int
}

type ruleParserImpl struct {
	lval  ruleSymType
	stack [ruleInitialStackSize]ruleSymType
	char  int
}

func (p *ruleParserImpl) Lookahead() int {
	return p.char
}

func ruleNewParser() ruleParser {
	return &ruleParserImpl{}
}

const ruleFlag = -1000

func ruleTokname(c int) string {
	if c >= 1 && c-1 < len(ruleToknames) {
		if ruleToknames[c-1] != "" {
			return ruleToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ruleStatname(s int) string {
	if s >= 0 && s < len(ruleStatenames) {
		if ruleStatenames[s] != "" {
			return ruleStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ruleErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ruleErrorVerbose {
		return "syntax error"
	}

	for _, e := range ruleErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ruleTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(rulePact[state])
	for tok := TOKSTART; tok-1 < len(ruleToknames); tok++ {
		if n := base + tok; n >= 0 && n < ruleLast && int(ruleChk[int(ruleAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ruleDef[state] == -2 {
		i := 0
		for ruleExca[i] != -1 || int(ruleExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ruleExca[i] >= 0; i += 2 {
			tok := int(ruleExca[i])
			if tok < TOKSTART || ruleExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ruleExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ruleTokname(tok)
	}
	return res
}

func rulelex1(lex ruleLexer, lval *ruleSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(ruleTok1[0])
		goto out
	}
	if char < len(ruleTok1) {
		token = int(ruleTok1[char])
		goto out
	}
	if char >= rulePrivate {
		if char < rulePrivate+len(ruleTok2) {
			token = int(ruleTok2[char-rulePrivate])
			goto out
		}
	}
	for i := 0; i < len(ruleTok3); i += 2 {
		token = int(ruleTok3[i+0])
		if token == char {
			token = int(ruleTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(ruleTok2[1]) /* unknown char */
	}
	if ruleDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ruleTokname(token), uint(char))
	}
	return char, token
}

func ruleParse(rulelex ruleLexer) int {
	return ruleNewParser().Parse(rulelex)
}

func (rulercvr *ruleParserImpl) Parse(rulelex ruleLexer) int {
	var rulen int
	var ruleVAL ruleSymType
	var ruleDollar []ruleSymType
	_ = ruleDollar // silence set and not used
	ruleS := rulercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	rulestate := 0
	rulercvr.char = -1
	ruletoken := -1 // rulercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		rulestate = -1
		rulercvr.char = -1
		ruletoken = -1
	}()
	rulep := -1
	goto rulestack

ret0:
	return 0

ret1:
	return 1

rulestack:
	/* put a state and value onto the stack */
	if ruleDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ruleTokname(ruletoken), ruleStatname(rulestate))
	}

	rulep++
	if rulep >= len(ruleS) {
		nyys := make([]ruleSymType, len(ruleS)*2)
		copy(nyys, ruleS)
		ruleS = nyys
	}
	ruleS[rulep] = ruleVAL
	ruleS[rulep].yys = rulestate

rulenewstate:
	rulen = int(rulePact[rulestate])
	if rulen <= ruleFlag {
		goto ruledefault /* simple state */
	}
	if rulercvr.char < 0 {
		rulercvr.char, ruletoken = rulelex1(rulelex, &rulercvr.lval)
	}
	rulen += ruletoken
	if rulen < 0 || rulen >= ruleLast {
		goto ruledefault
	}
	rulen = int(ruleAct[rulen])
	if int(ruleChk[rulen]) == ruletoken { /* valid shift */
		rulercvr.char = -1
		ruletoken = -1
		ruleVAL = rulercvr.lval
		rulestate = rulen
		if Errflag > 0 {
			Errflag--
		}
		goto rulestack
	}

ruledefault:
	/* default state action */
	rulen = int(ruleDef[rulestate])
	if rulen == -2 {
		if rulercvr.char < 0 {
			rulercvr.char, ruletoken = rulelex1(rulelex, &rulercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ruleExca[xi+0] == -1 && int(ruleExca[xi+1]) == rulestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			rulen = int(ruleExca[xi+0])
			if rulen < 0 || rulen == ruletoken {
				break
			}
		}
		rulen = int(ruleExca[xi+1])
		if rulen < 0 {
			goto ret0
		}
	}
	if rulen == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			rulelex.Error(ruleErrorMessage(rulestate, ruletoken))
			Nerrs++
			if ruleDebug >= 1 {
				__yyfmt__.Printf("%s", ruleStatname(rulestate))
				__yyfmt__.Printf(" saw %s\n", ruleTokname(ruletoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for rulep >= 0 {
				rulen = int(rulePact[ruleS[rulep].yys]) + ruleErrCode
				if rulen >= 0 && rulen < ruleLast {
					rulestate = int(ruleAct[rulen]) /* simulate a shift of "error" */
					if int(ruleChk[rulestate]) == ruleErrCode {
						goto rulestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ruleDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ruleS[rulep].yys)
				}
				rulep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ruleDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ruleTokname(ruletoken))
			}
			if ruletoken == ruleEofCode {
				goto ret1
			}
			rulercvr.char = -1
			ruletoken = -1
			goto rulenewstate /* try again in the same state */
		}
	}

	/* reduction by production rulen */
	if ruleDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", rulen, ruleStatname(rulestate))
	}

	rulent := rulen
	rulept := rulep
	_ = rulept // guard against "declared and not used"

	rulep -= int(ruleR2[rulen])
	// rulep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if rulep+1 >= len(ruleS) {
		nyys := make([]ruleSymType, len(ruleS)*2)
		copy(nyys, ruleS)
		ruleS = nyys
	}
	ruleVAL = ruleS[rulep+1]

	/* consult goto table to find next state */
	rulen = int(ruleR1[rulen])
	ruleg := int(rulePgo[rulen])
	rulej := ruleg + ruleS[rulep].yys + 1

	if rulej >= ruleLast {
		rulestate = int(ruleAct[ruleg])
	} else {
		rulestate = int(ruleAct[rulej])
		if int(ruleChk[rulestate]) != -rulen {
			rulestate = int(ruleAct[ruleg])
		}
	}
	// dummy call; replaced with literal code
	switch rulent {

	case 1:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:54
		{
			ruleVAL.rule = ruleDollar[1].rule
			rulelex.Result(ruleVAL.rule)
		}
	case 2:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:59
		{
			ruleVAL.rule = &nodeAnd{left: ruleDollar[1].rule, right: ruleDollar[3].rule}
			rulelex.Result(ruleVAL.rule)
		}
	case 3:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:64
		{
			ruleVAL.rule = &nodeOr{left: ruleDollar[1].rule, right: ruleDollar[3].rule}
			rulelex.Result(ruleVAL.rule)
		}
	case 4:
		ruleDollar = ruleS[rulept-2 : rulept+1]
//line parser.y:69
		{
			ruleVAL.rule = &nodeNot{right: ruleDollar[2].rule}
			rulelex.Result(ruleVAL.rule)
		}
	case 5:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:74
		{
			ruleVAL.rule = ruleDollar[2].rule
			rulelex.Result(ruleVAL.rule)
		}
	case 6:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:83
		{
			ruleVAL.rule = &nodeCompare{
				lv: ruleDollar[1].rule,
				op: ruleDollar[2].operator,
				rv: ruleDollar[3].rule,
			}
		}
	case 7:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:92
		{
			ruleVAL.rule = &nodeCompare{
				lv: ruleDollar[1].rule,
				op: ruleDollar[2].operator,
				rv: ruleDollar[3].rule,
			}
		}
	case 8:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:101
		{
			elem, err := parseValueToken(token_REGEX, ruleDollar[3].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}

			ruleVAL.rule = &nodeMatch{
				lv: ruleDollar[1].rule,
				rv: elem,
			}
		}
	case 9:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:114
		{
			ruleVAL.rule = ruleDollar[1].rule
		}
	case 10:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:119
		{
			ruleVAL.rule = &nodeIn{
				lv: ruleDollar[1].rule,
				rv: ruleDollar[3].rule,
			}
		}
	case 11:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:127
		{
			v, err := parseValueToken(token_IP_CIDR, ruleDollar[3].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}

			ruleVAL.rule = &nodeCompare{
				lv: ruleDollar[1].rule,
				op: op_EQ,
				rv: v,
			}
		}
	case 12:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:143
		{
			ruleVAL.operator = op_GT
		}
	case 13:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:144
		{
			ruleVAL.operator = op_GE
		}
	case 14:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:145
		{
			ruleVAL.operator = op_LT
		}
	case 15:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:146
		{
			ruleVAL.operator = op_LE
		}
	case 16:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:150
		{
			ruleVAL.operator = op_EQ
		}
	case 17:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:151
		{
			ruleVAL.operator = op_NE
		}
	case 18:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:152
		{
			ruleVAL.operator = op_CONTAINS
		}
	case 19:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:158
		{
			ruleVAL.arrayValue = []Rule{ruleDollar[1].rule}
		}
	case 20:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:162
		{
			ruleVAL.arrayValue = append(ruleDollar[1].arrayValue, ruleDollar[3].rule)
		}
	case 21:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:169
		{
			ruleVAL.rule = newArrayValue(ruleDollar[2].arrayValue)
		}
	case 22:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:175
		{
			ruleVAL.rule = ruleDollar[1].rule
		}
	case 23:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:176
		{
			ruleVAL.rule = ruleDollar[1].rule
		}
	case 24:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:177
		{
			ruleVAL.rule = ruleDollar[1].rule
		}
	case 25:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:182
		{
			ruleVAL.rule = ruleDollar[1].rule
		}
	case 26:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:184
		{
			v, err := parseValueToken(token_STRING, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 27:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:193
		{
			v, err := parseValueToken(token_BOOL, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 28:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:202
		{
			v, err := parseValueToken(token_IP, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 29:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:211
		{
			v, err := parseValueToken(token_IP_CIDR, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 30:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:220
		{
			v, err := parseValueToken(token_HEX_STRING, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 31:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:229
		{
			v, err := parseValueToken(token_REGEX, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 32:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:241
		{
			v, err := parseValueToken(token_INT, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 33:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:250
		{
			v, err := parseValueToken(token_FLOAT, ruleDollar[1].valueLiteral)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = v
		}
	case 34:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:259
		{
			ruleVAL.rule = FieldValue(string(ruleDollar[1].valueLiteral))
		}
	case 35:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:263
		{
			// there is no syntatic difference between a function call and a field name
			// so an isolated function name is treated as a field name
			ruleVAL.rule = FieldValue(string(ruleDollar[1].valueLiteral))
		}
	case 36:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:272
		{
			fv := newFunctionValue(string(ruleDollar[1].valueLiteral), newArrayValue(ruleDollar[3].arrayValue))
			if err := fv.ValidateStdlibFnArgs(); err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.rule = fv
		}
	case 37:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:284
		{
			ruleVAL.arrayValue = []Rule{ruleDollar[1].rule}
		}
	case 38:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:288
		{
			ruleVAL.arrayValue = append(ruleDollar[1].arrayValue, ruleDollar[3].rule)
		}
	case 39:
		ruleDollar = ruleS[rulept-0 : rulept+1]
//line parser.y:292
		{
			ruleVAL.arrayValue = ([]Rule)(nil)
		}
	}
	goto rulestack /* stack new state and value */
}
