// Code generated by goyacc -v y.output -o parser.go -p rule parser.y. DO NOT EDIT.

//line parser.y:1

package rulekit

import __yyfmt__ "fmt"

//line parser.y:3

import (
	"fmt"
	"io"
	"net"
	"os"
	"regexp"
	"strconv"
	"strings"
)

var ruleDebugWriter io.Writer = os.Stderr

func init() {
	SetErrorVerbose(true) // default to true
}

// SetDebugLevel sets the debug verbosity level
func SetDebugLevel(level int) {
	ruleDebug = level
}

func SetDebugWriter(w io.Writer) {
	ruleDebugWriter = w
}

// SetErrorVerbose enables or disables verbose error reporting
func SetErrorVerbose(verbose bool) {
	ruleErrorVerbose = verbose
}

func operatorToString(op int) string {
	switch op {
	case token_TEST_EQ:
		return "=="
	case token_TEST_NE:
		return "!="
	case token_TEST_GT:
		return ">"
	case token_TEST_GE:
		return ">="
	case token_TEST_LT:
		return "<"
	case token_TEST_LE:
		return "<="
	case token_TEST_CONTAINS:
		return "contains"
	case token_TEST_MATCHES:
		return "matches"
	default:
		return "unknown"
	}
}

func withNegate(negate bool, node Rule) Rule {
	if negate {
		return &nodeNot{right: node}
	}
	return node
}

// Add these type-specific parsing functions in the Go code section
func parseString[T interface{ string | []byte }](data T) (string, error) {
	raw_value := string(data)
	if raw_value[0] == '\'' {
		// Convert single-quoted string to double-quoted
		inner := raw_value[1 : len(raw_value)-1]
		escaped := strings.ReplaceAll(inner, `"`, "\\\"")
		escaped = strings.ReplaceAll(escaped, `\'`, `'`)
		raw_value = `"` + escaped + `"`
	}
	return strconv.Unquote(raw_value)
}

func parseInt[T interface{ string | []byte }](data T) (any, error) {
	raw_value := string(data)
	if n, err := strconv.ParseInt(raw_value, 0, 64); err == nil {
		return n, nil
	}
	if n, err := strconv.ParseUint(raw_value, 0, 64); err == nil {
		return n, nil
	}
	return nil, fmt.Errorf("parsing integer: invalid value %q", raw_value)
}

func parseFloat[T interface{ string | []byte }](data T) (float64, error) {
	return strconv.ParseFloat(string(data), 64)
}

func parseBool[T interface{ string | []byte }](data T) (bool, error) {
	raw_value := string(data)
	if strings.EqualFold(raw_value, "true") {
		return true, nil
	}
	if strings.EqualFold(raw_value, "false") {
		return false, nil
	}
	return false, fmt.Errorf("parsing boolean: unknown value %q", raw_value)
}

//line parser.y:105
type ruleSymType struct {
	yys      int
	rule     Rule
	data     []byte
	operator int
	negate   bool
	values   []any
}

const token_FIELD = 57346
const token_STRING = 57347
const token_HEX_STRING = 57348
const token_INT = 57349
const token_FLOAT = 57350
const token_BOOL = 57351
const token_IP_CIDR = 57352
const token_IP = 57353
const token_REGEX = 57354
const token_TEST_NOT = 57355
const token_TEST_AND = 57356
const token_TEST_OR = 57357
const token_LPAREN = 57358
const token_RPAREN = 57359
const token_LBRACKET = 57360
const token_RBRACKET = 57361
const token_COMMA = 57362
const token_TEST_EQ = 57363
const token_TEST_NE = 57364
const token_TEST_GT = 57365
const token_TEST_GE = 57366
const token_TEST_LT = 57367
const token_TEST_LE = 57368
const token_TEST_CONTAINS = 57369
const token_TEST_MATCHES = 57370
const token_ERROR = 57371

var ruleToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_FIELD",
	"token_STRING",
	"token_HEX_STRING",
	"token_INT",
	"token_FLOAT",
	"token_BOOL",
	"token_IP_CIDR",
	"token_IP",
	"token_REGEX",
	"token_TEST_NOT",
	"token_TEST_AND",
	"token_TEST_OR",
	"token_LPAREN",
	"token_RPAREN",
	"token_LBRACKET",
	"token_RBRACKET",
	"token_COMMA",
	"token_TEST_EQ",
	"token_TEST_NE",
	"token_TEST_GT",
	"token_TEST_GE",
	"token_TEST_LT",
	"token_TEST_LE",
	"token_TEST_CONTAINS",
	"token_TEST_MATCHES",
	"token_ERROR",
}

var ruleStatenames = [...]string{}

const ruleEofCode = 1
const ruleErrCode = 2
const ruleInitialStackSize = 16

//line parser.y:405

//line yacctab:1
var ruleExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 5,
	1, 14,
	14, 14,
	15, 14,
	17, 14,
	-2, 25,
}

const rulePrivate = 57344

const ruleLast = 46

var ruleAct = [...]int8{
	36, 18, 19, 22, 23, 24, 25, 20, 17, 26,
	27, 41, 42, 28, 30, 29, 6, 7, 5, 14,
	6, 7, 31, 7, 11, 34, 35, 3, 10, 37,
	4, 38, 39, 40, 1, 32, 33, 15, 8, 9,
	21, 12, 13, 43, 16, 2,
}

var rulePact = [...]int16{
	14, 6, -1000, 14, 14, 11, 14, 14, -1000, 2,
	-20, -1000, 8, -1000, -1000, 4, 28, 13, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24, -1000, -1000, -1000, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, 24, -1000,
}

var rulePgo = [...]int8{
	0, 34, 45, 44, 40, 37, 28, 26, 0,
}

var ruleR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 6, 6, 7, 7, 8,
	8, 8, 8,
}

var ruleR2 = [...]int8{
	0, 1, 3, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 1, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 1,
	1, 1, 1,
}

var ruleChk = [...]int16{
	-1000, -1, -2, 13, 16, 4, 14, 15, -1, -1,
	-6, 13, -1, -1, 17, -5, -3, 28, 21, 22,
	27, -4, 23, 24, 25, 26, 5, 6, 9, 11,
	10, 18, 7, 8, 12, -7, -8, 5, 7, 8,
	9, 19, 20, -8,
}

var ruleDef = [...]int8{
	0, -2, 1, 0, 0, -2, 0, 0, 4, 0,
	0, 26, 2, 3, 5, 17, 0, 0, 22, 23,
	24, 16, 18, 19, 20, 21, 6, 7, 10, 11,
	12, 0, 8, 9, 13, 0, 27, 29, 30, 31,
	32, 15, 0, 28,
}

var ruleTok1 = [...]int8{
	1,
}

var ruleTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29,
}

var ruleTok3 = [...]int8{
	0,
}

var ruleErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ruleDebug        = 0
	ruleErrorVerbose = false
)

type ruleLexer interface {
	Result(n Rule)
	Lex(lval *ruleSymType) int
	Error(s string)
}

type ruleParser interface {
	Parse(ruleLexer) int
	Lookahead() int
}

type ruleParserImpl struct {
	lval  ruleSymType
	stack [ruleInitialStackSize]ruleSymType
	char  int
}

func (p *ruleParserImpl) Lookahead() int {
	return p.char
}

func ruleNewParser() ruleParser {
	return &ruleParserImpl{}
}

const ruleFlag = -1000

func ruleTokname(c int) string {
	if c >= 1 && c-1 < len(ruleToknames) {
		if ruleToknames[c-1] != "" {
			return ruleToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ruleStatname(s int) string {
	if s >= 0 && s < len(ruleStatenames) {
		if ruleStatenames[s] != "" {
			return ruleStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ruleErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ruleErrorVerbose {
		return "syntax error"
	}

	for _, e := range ruleErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ruleTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(rulePact[state])
	for tok := TOKSTART; tok-1 < len(ruleToknames); tok++ {
		if n := base + tok; n >= 0 && n < ruleLast && int(ruleChk[int(ruleAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ruleDef[state] == -2 {
		i := 0
		for ruleExca[i] != -1 || int(ruleExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ruleExca[i] >= 0; i += 2 {
			tok := int(ruleExca[i])
			if tok < TOKSTART || ruleExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ruleExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ruleTokname(tok)
	}
	return res
}

func rulelex1(lex ruleLexer, lval *ruleSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(ruleTok1[0])
		goto out
	}
	if char < len(ruleTok1) {
		token = int(ruleTok1[char])
		goto out
	}
	if char >= rulePrivate {
		if char < rulePrivate+len(ruleTok2) {
			token = int(ruleTok2[char-rulePrivate])
			goto out
		}
	}
	for i := 0; i < len(ruleTok3); i += 2 {
		token = int(ruleTok3[i+0])
		if token == char {
			token = int(ruleTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(ruleTok2[1]) /* unknown char */
	}
	if ruleDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ruleTokname(token), uint(char))
	}
	return char, token
}

func ruleParse(rulelex ruleLexer) int {
	return ruleNewParser().Parse(rulelex)
}

func (rulercvr *ruleParserImpl) Parse(rulelex ruleLexer) int {
	var rulen int
	var ruleVAL ruleSymType
	var ruleDollar []ruleSymType
	_ = ruleDollar // silence set and not used
	ruleS := rulercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	rulestate := 0
	rulercvr.char = -1
	ruletoken := -1 // rulercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		rulestate = -1
		rulercvr.char = -1
		ruletoken = -1
	}()
	rulep := -1
	goto rulestack

ret0:
	return 0

ret1:
	return 1

rulestack:
	/* put a state and value onto the stack */
	if ruleDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ruleTokname(ruletoken), ruleStatname(rulestate))
	}

	rulep++
	if rulep >= len(ruleS) {
		nyys := make([]ruleSymType, len(ruleS)*2)
		copy(nyys, ruleS)
		ruleS = nyys
	}
	ruleS[rulep] = ruleVAL
	ruleS[rulep].yys = rulestate

rulenewstate:
	rulen = int(rulePact[rulestate])
	if rulen <= ruleFlag {
		goto ruledefault /* simple state */
	}
	if rulercvr.char < 0 {
		rulercvr.char, ruletoken = rulelex1(rulelex, &rulercvr.lval)
	}
	rulen += ruletoken
	if rulen < 0 || rulen >= ruleLast {
		goto ruledefault
	}
	rulen = int(ruleAct[rulen])
	if int(ruleChk[rulen]) == ruletoken { /* valid shift */
		rulercvr.char = -1
		ruletoken = -1
		ruleVAL = rulercvr.lval
		rulestate = rulen
		if Errflag > 0 {
			Errflag--
		}
		goto rulestack
	}

ruledefault:
	/* default state action */
	rulen = int(ruleDef[rulestate])
	if rulen == -2 {
		if rulercvr.char < 0 {
			rulercvr.char, ruletoken = rulelex1(rulelex, &rulercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ruleExca[xi+0] == -1 && int(ruleExca[xi+1]) == rulestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			rulen = int(ruleExca[xi+0])
			if rulen < 0 || rulen == ruletoken {
				break
			}
		}
		rulen = int(ruleExca[xi+1])
		if rulen < 0 {
			goto ret0
		}
	}
	if rulen == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			rulelex.Error(ruleErrorMessage(rulestate, ruletoken))
			Nerrs++
			if ruleDebug >= 1 {
				__yyfmt__.Printf("%s", ruleStatname(rulestate))
				__yyfmt__.Printf(" saw %s\n", ruleTokname(ruletoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for rulep >= 0 {
				rulen = int(rulePact[ruleS[rulep].yys]) + ruleErrCode
				if rulen >= 0 && rulen < ruleLast {
					rulestate = int(ruleAct[rulen]) /* simulate a shift of "error" */
					if int(ruleChk[rulestate]) == ruleErrCode {
						goto rulestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ruleDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ruleS[rulep].yys)
				}
				rulep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ruleDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ruleTokname(ruletoken))
			}
			if ruletoken == ruleEofCode {
				goto ret1
			}
			rulercvr.char = -1
			ruletoken = -1
			goto rulenewstate /* try again in the same state */
		}
	}

	/* reduction by production rulen */
	if ruleDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", rulen, ruleStatname(rulestate))
	}

	rulent := rulen
	rulept := rulep
	_ = rulept // guard against "declared and not used"

	rulep -= int(ruleR2[rulen])
	// rulep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if rulep+1 >= len(ruleS) {
		nyys := make([]ruleSymType, len(ruleS)*2)
		copy(nyys, ruleS)
		ruleS = nyys
	}
	ruleVAL = ruleS[rulep+1]

	/* consult goto table to find next state */
	rulen = int(ruleR1[rulen])
	ruleg := int(rulePgo[rulen])
	rulej := ruleg + ruleS[rulep].yys + 1

	if rulej >= ruleLast {
		rulestate = int(ruleAct[ruleg])
	} else {
		rulestate = int(ruleAct[rulej])
		if int(ruleChk[rulestate]) != -rulen {
			rulestate = int(ruleAct[ruleg])
		}
	}
	// dummy call; replaced with literal code
	switch rulent {

	case 1:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:145
		{
			ruleVAL.rule = ruleDollar[1].rule
			rulelex.Result(ruleVAL.rule)
		}
	case 2:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:150
		{
			ruleVAL.rule = &nodeAnd{left: ruleDollar[1].rule, right: ruleDollar[3].rule}
			rulelex.Result(ruleVAL.rule)
		}
	case 3:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:155
		{
			ruleVAL.rule = &nodeOr{left: ruleDollar[1].rule, right: ruleDollar[3].rule}
			rulelex.Result(ruleVAL.rule)
		}
	case 4:
		ruleDollar = ruleS[rulept-2 : rulept+1]
//line parser.y:160
		{
			ruleVAL.rule = &nodeNot{right: ruleDollar[2].rule}
			rulelex.Result(ruleVAL.rule)
		}
	case 5:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:165
		{
			ruleVAL.rule = ruleDollar[2].rule
			rulelex.Result(ruleVAL.rule)
		}
	case 6:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:173
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			value, err := parseString(raw_value)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing string: %v", err))
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     value,
			})
		}
	case 7:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:191
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			hs, err := ParseHexString(raw_value)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing hex string: %v", err))
				return 1
			}
			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     hs,
			})
		}
	case 8:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:208
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			value, err := parseInt(raw_value)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     value,
			})
		}
	case 9:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:226
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			value, err := parseFloat(raw_value)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing float: %v", err))
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     value,
			})
		}
	case 10:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:244
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			value, err := parseBool(raw_value)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     value,
			})
		}
	case 11:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:262
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			ip := net.ParseIP(raw_value)
			if ip == nil {
				rulelex.Error(fmt.Sprintf("parsing IP: invalid value %q", raw_value))
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     ip,
			})
		}
	case 12:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:280
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator

			_, ipnet, err := net.ParseCIDR(raw_value)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing CIDR: invalid value %v", raw_value))
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     ipnet,
			})
		}
	case 13:
		ruleDollar = ruleS[rulept-4 : rulept+1]
//line parser.y:298
		{
			field, raw_value := string(ruleDollar[1].data), string(ruleDollar[4].data)
			pattern := raw_value[1 : len(raw_value)-1] // Remove the forward slashes
			negate := ruleDollar[2].negate

			r_expr, err := regexp.Compile(pattern)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing regular expression: %v", err))
				return 1
			}

			ruleVAL.rule = withNegate(negate, &nodeMatch{
				predicate: predicate{field: field, raw_value: raw_value},
				reg_expr:  r_expr,
			})
		}
	case 14:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:315
		{
			ruleVAL.rule = &nodeNotZero{string(ruleDollar[1].data)}
		}
	case 15:
		ruleDollar = ruleS[rulept-6 : rulept+1]
//line parser.y:319
		{
			field := string(ruleDollar[1].data)
			negate := ruleDollar[2].negate
			op := ruleDollar[3].operator
			values := ruleDollar[5].values

			raw_value := fmt.Sprintf("%v", values) // You might want to improve this formatting

			ruleVAL.rule = withNegate(negate, &nodeCompare{
				predicate: predicate{field: field, raw_value: raw_value},
				op:        op,
				value:     values,
			})
		}
	case 18:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:338
		{
			ruleVAL.operator = token_TEST_GT
		}
	case 19:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:339
		{
			ruleVAL.operator = token_TEST_GE
		}
	case 20:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:340
		{
			ruleVAL.operator = token_TEST_LT
		}
	case 21:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:341
		{
			ruleVAL.operator = token_TEST_LE
		}
	case 22:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:345
		{
			ruleVAL.operator = token_TEST_EQ
		}
	case 23:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:346
		{
			ruleVAL.operator = token_TEST_NE
		}
	case 24:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:347
		{
			ruleVAL.operator = token_TEST_CONTAINS
		}
	case 25:
		ruleDollar = ruleS[rulept-0 : rulept+1]
//line parser.y:351
		{
			ruleVAL.negate = false
		}
	case 26:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:352
		{
			ruleVAL.negate = true
		}
	case 27:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:357
		{
			ruleVAL.values = ruleDollar[1].values
		}
	case 28:
		ruleDollar = ruleS[rulept-3 : rulept+1]
//line parser.y:361
		{
			ruleVAL.values = append(ruleDollar[1].values, ruleDollar[3].values...)
		}
	case 29:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:368
		{
			value, err := parseString(ruleDollar[1].data)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing array string: %v", err))
				return 1
			}
			ruleVAL.values = []any{value}
		}
	case 30:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:377
		{
			value, err := parseInt(ruleDollar[1].data)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.values = []any{value}
		}
	case 31:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:386
		{
			value, err := parseFloat(ruleDollar[1].data)
			if err != nil {
				rulelex.Error(fmt.Sprintf("parsing array float: %v", err))
				return 1
			}
			ruleVAL.values = []any{value}
		}
	case 32:
		ruleDollar = ruleS[rulept-1 : rulept+1]
//line parser.y:395
		{
			value, err := parseBool(ruleDollar[1].data)
			if err != nil {
				rulelex.Error(err.Error())
				return 1
			}
			ruleVAL.values = []any{value}
		}
	}
	goto rulestack /* stack new state and value */
}
